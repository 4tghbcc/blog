# Установка

```bash
pip install flask flask_sqlalchemy flask_bcrypt flask_login
```

---

# ФАЙЛ: `app.py`

```python
from flask import Flask, render_template, request, redirect, url_for, session, flash, abort
from flask_sqlalchemy import SQLAlchemy
from flask_bcrypt import Bcrypt
from flask_login import LoginManager, UserMixin, login_user, login_required, logout_user, current_user

from datetime import datetime

app = Flask(__name__)
app.config['SECRET_KEY'] = 'your_secret_key'
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///blog.db'
db = SQLAlchemy(app)
bcrypt = Bcrypt(app)
login_manager = LoginManager(app)
login_manager.login_view = 'login'

# -----------------------------------------------#
# МОДЕЛИ
# -----------------------------------------------#

subscriptions = db.Table('subscriptions',
    db.Column('subscriber_id', db.Integer, db.ForeignKey('user.id')),
    db.Column('subscribed_id', db.Integer, db.ForeignKey('user.id'))
)

post_tags = db.Table('post_tags',
    db.Column('post_id', db.Integer, db.ForeignKey('post.id')),
    db.Column('tag_id', db.Integer, db.ForeignKey('tag.id'))
)


class User(db.Model, UserMixin):
    id = db.Column(db.Integer, primary_key=True)
    email = db.Column(db.String(120), unique=True)
    password = db.Column(db.String(128))
    posts = db.relationship('Post', backref='author', lazy='dynamic')
    subscriptions = db.relationship(
        'User', secondary=subscriptions,
        primaryjoin=(subscriptions.c.subscriber_id == id),
        secondaryjoin=(subscriptions.c.subscribed_id == id),
        backref=db.backref('subscribers', lazy='dynamic'),
        lazy='dynamic'
    )

    def subscribe(self, user):
        if not self.is_subscribed(user):
            self.subscriptions.append(user)

    def unsubscribe(self, user):
        if self.is_subscribed(user):
            self.subscriptions.remove(user)

    def is_subscribed(self, user):
        return self.subscriptions.filter(
            subscriptions.c.subscribed_id == user.id
        ).count() > 0


class Post(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    author_id = db.Column(db.Integer, db.ForeignKey('user.id'))
    title = db.Column(db.String(140))
    content = db.Column(db.Text)
    created = db.Column(db.DateTime, default=datetime.utcnow)
    is_public = db.Column(db.Boolean, default=True)
    tags = db.relationship('Tag', secondary=post_tags, backref='posts')
    comments = db.relationship('Comment', backref='post', lazy='dynamic')

class Tag(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(50), unique=True)

class Comment(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    post_id = db.Column(db.Integer, db.ForeignKey('post.id'))
    author_id = db.Column(db.Integer, db.ForeignKey('user.id'))
    content = db.Column(db.Text)
    created = db.Column(db.DateTime, default=datetime.utcnow)
    user = db.relationship('User')


@login_manager.user_loader
def load_user(user_id):
    return User.query.get(int(user_id))

# -----------------------------------------------#
# AUTH
# -----------------------------------------------#

@app.route('/register', methods=['GET', 'POST'])
def register():
    if request.method == 'POST':
        email = request.form['email']
        password = request.form['password']
        if User.query.filter_by(email=email).first():
            flash('Такой email уже зарегистрирован')
            return redirect('/register')
        if len(password) < 4:
            flash('Пароль слишком короткий')
            return redirect('/register')
        password_hash = bcrypt.generate_password_hash(password).decode('utf-8')
        user = User(email=email, password=password_hash)
        db.session.add(user)
        db.session.commit()
        flash('Регистрация успешна')
        return redirect('/login')
    return render_template('register.html')


@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        email = request.form['email']
        password = request.form['password']
        user = User.query.filter_by(email=email).first()
        if user and bcrypt.check_password_hash(user.password, password):
            login_user(user)
            return redirect('/')
        flash('Неверный логин/пароль')
    return render_template('login.html')

@app.route('/logout')
@login_required
def logout():
    logout_user()
    return redirect('/')


# -----------------------------------------------#
# ГЛАВНАЯ/ЛЕНТА
# -----------------------------------------------#

@app.route('/')
@login_required
def index():
    # Лента: посты тех, на кого подписан
    following_ids = [u.id for u in current_user.subscriptions]
    posts = Post.query.filter(
        ((Post.is_public==True) | (Post.author_id==current_user.id)) &
        (Post.author_id.in_(following_ids) | (Post.author_id==current_user.id))
    ).order_by(Post.created.desc()).all()
    return render_template('index.html', posts=posts)

# -----------------------------------------------#
# СОЗДАНИЕ/РЕДАКТИРОВАНИЕ ПОСТОВ
# -----------------------------------------------#

@app.route('/post/new', methods=['GET', 'POST'])
@login_required
def new_post():
    if request.method == 'POST':
        title = request.form['title']
        content = request.form['content']
        is_public = request.form.get('is_public')=="on"
        tag_names = [t.strip() for t in request.form.get('tags','').split(',') if t.strip()]
        tags = []
        for tag_name in tag_names:
            tag = Tag.query.filter_by(name=tag_name).first()
            if not tag:
                tag = Tag(name=tag_name)
                db.session.add(tag)
            tags.append(tag)
        post = Post(title=title, content=content, is_public=is_public, author=current_user, tags=tags)
        db.session.add(post)
        db.session.commit()
        return redirect(url_for('index'))
    return render_template('new_post.html')

@app.route('/post/<int:post_id>/edit', methods=['GET','POST'])
@login_required
def edit_post(post_id):
    post = Post.query.get_or_404(post_id)
    if post.author != current_user:
        abort(403)
    if request.method == 'POST':
        post.title = request.form['title']
        post.content = request.form['content']
        post.is_public = request.form.get('is_public')=="on"
        tag_names = [t.strip() for t in request.form.get('tags','').split(',') if t.strip()]
        tags = []
        for tag_name in tag_names:
            tag = Tag.query.filter_by(name=tag_name).first()
            if not tag:
                tag = Tag(name=tag_name)
                db.session.add(tag)
            tags.append(tag)
        post.tags = tags
        db.session.commit()
        return redirect(url_for('post_detail', post_id=post.id))
    return render_template('edit_post.html', post=post)

@app.route('/post/<int:post_id>/delete')
@login_required
def delete_post(post_id):
    post = Post.query.get_or_404(post_id)
    if post.author != current_user:
        abort(403)
    db.session.delete(post)
    db.session.commit()
    return redirect('/')

# -----------------------------------------------#
# ПРОСМОТР ПОСТА и КОММЕНТАРИИ
# -----------------------------------------------#

@app.route('/post/<int:post_id>', methods=['GET', 'POST'])
@login_required
def post_detail(post_id):
    post = Post.query.get_or_404(post_id)
    # доступ: публичный или автор или подписка (если частный, нужна доработка)
    if not post.is_public and post.author != current_user:
        abort(403)
    if request.method == 'POST':
        content = request.form['content']
        if content.strip():
            comment = Comment(post=post, content=content, author_id=current_user.id)
            db.session.add(comment)
            db.session.commit()
    comments = post.comments.order_by(Comment.created).all()
    return render_template('post_detail.html', post=post, comments=comments)

# -----------------------------------------------#
# ПОДПИСКА НА ПОЛЬЗОВАТЕЛЕЙ
# -----------------------------------------------#

@app.route('/user/<int:user_id>')
@login_required
def user_profile(user_id):
    user = User.query.get_or_404(user_id)
    is_subscribed = current_user.is_subscribed(user)
    posts = Post.query.filter_by(author_id=user.id).order_by(Post.created.desc()).all()
    return render_template('user_profile.html', user=user, is_subscribed=is_subscribed, posts=posts)

@app.route('/subscribe/<int:user_id>')
@login_required
def subscribe(user_id):
    user = User.query.get_or_404(user_id)
    current_user.subscribe(user)
    db.session.commit()
    return redirect(url_for('user_profile', user_id=user_id))

@app.route('/unsubscribe/<int:user_id>')
@login_required
def unsubscribe(user_id):
    user = User.query.get_or_404(user_id)
    current_user.unsubscribe(user)
    db.session.commit()
    return redirect(url_for('user_profile', user_id=user_id))

# -----------------------------------------------#
# ПРОСМОТР ПО ТЕГУ
# -----------------------------------------------#
@app.route('/tag/<tag_name>')
@login_required
def posts_by_tag(tag_name):
    tag = Tag.query.filter_by(name=tag_name).first_or_404()
    posts = tag.posts
    return render_template('posts_by_tag.html', tag=tag, posts=posts)

# -----------------------------------------------#
# СТАРТОВАЯ ИНИЦИАЛИЗАЦИЯ
# -----------------------------------------------#

if __name__ == '__main__':
    with app.app_context():
        db.create_all()
    app.run(debug=True)
```
